import torch
import torch.optim as optim
from torchvision import models, transforms
from PIL import Image
import matplotlib.pyplot as plt
import os

# Load image
def load_image(image_path, max_size=400, shape=None):
    if not os.path.isfile(image_path):
        raise FileNotFoundError(f"Image file '{image_path}' not found.")
    
    image = Image.open(image_path)
    if max(image.size) > max_size:
        size = max_size
    else:
        size = max(image.size)
    
    if shape is not None:
        size = shape
        
    image = image.resize((size, size), Image.LANCZOS)
    
    # Preprocess image for VGG19
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    
    image = transform(image).unsqueeze(0)
    return image

# Display image
def imshow(tensor, title=None):
    image = tensor.clone().detach().cpu().squeeze(0)
    image = transforms.ToPILImage()(image)
    plt.imshow(image)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)

# Define the style transfer function
def neural_style_transfer(content_image, style_image, num_steps=300, style_weight=1000000, content_weight=1):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    
    # Load pre-trained VGG19 model
    model = models.vgg19(pretrained=True).features.to(device).eval()
    
    def get_features(image, model):
        layers = {
            '0': 'conv1_1',
            '5': 'conv2_1',
            '10': 'conv3_1',
            '19': 'conv4_1',
            '21': 'conv4_2',
            '28': 'conv5_1'
        }
        features = {}
        x = image
        for name, layer in model._modules.items():
            x = layer(x)
            if name in layers:
                features[layers[name]] = x
        return features
    
    def gram_matrix(tensor):
        _, c, h, w = tensor.size()
        tensor = tensor.view(c, h * w)
        gram = torch.mm(tensor, tensor.t())
        return gram / (c * h * w)
    
    content_features = get_features(content_image, model)
    style_features = get_features(style_image, model)
    
    # Create target image
    target = content_image.clone().requires_grad_(True).to(device)
    optimizer = optim.LBFGS([target])
    
    style_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}
    
    for i in range(num_steps):
        def closure():
            target.data.clamp_(0, 1)
            
            optimizer.zero_grad()
            
            target_features = get_features(target, model)
            
            content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2'])**2)
            
            style_loss = 0
            for layer in style_grams:
                target_gram = gram_matrix(target_features[layer])
                style_gram = style_grams[layer]
                style_loss += torch.mean((target_gram - style_gram)**2)
                
            total_loss = content_weight * content_loss + style_weight * style_loss
            total_loss.backward()
            
            return total_loss
        
        optimizer.step(closure)
    
    target.data.clamp_(0, 1)
    return target

# Load images
content_image = load_image("content.jpg").to(torch.device("cuda" if torch.cuda.is_available() else "cpu"))
style_image = load_image("style.jpg", shape=content_image.shape[-2:]).to(torch.device("cuda" if torch.cuda.is_available() else "cpu"))

# Apply style transfer
output = neural_style_transfer(content_image, style_image)

# Display and save the output
imshow(output.cpu().detach(), title="Styled Image")
plt.show()

# Save the output image
output_image = transforms.ToPILImage()(output.squeeze(0).cpu().detach())
output_image.save("output.jpg")
